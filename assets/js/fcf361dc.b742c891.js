"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[632],{89039:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates and returns a new remote property with the value of `initialValue`.","params":[{"name":"initialValue","desc":"","lua_type":"any"},{"name":"middleware","desc":"","lua_type":"Middleware?"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":175,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"is","desc":"Returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":202,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"get","desc":"Returns the current value set for the remote property.","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":212,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"setForClients","desc":"Calls [RemoteProperty:setForClient] for all clients in `clients`.","params":[{"name":"clients","desc":"","lua_type":"{ Player }"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":222,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"setForClient","desc":"Sets the value of the remote property for `client` *specifically*, to `value`. \\n    \\n:::note Precaution!\\n- [Argument limitations](https://create.roblox.com/docs/scripting/events/argument-limitations-for-bindables-and-remotes)\\napply, as remote functions are internally used to render `value` accessible to the respective clients.\\n\\n- Setting the value for `client` to `nil` will **not** remove the client\'s value -- call [RemoteProperty:removeForClient]\\nto do that.\\n:::","params":[{"name":"client","desc":"","lua_type":"Player"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":242,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"removeForClient","desc":"Removes the value stored for `client` *specifically* in the remote property.","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":255,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"removeForClients","desc":"Calls [RemoteProperty:removeForClient] for all clients in the `clients` table.","params":[{"name":"clients","desc":"","lua_type":"{ Player }"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":276,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"hasClientValueSet","desc":"Returns a boolean indicating if there is a specific value stored for `client` \\nin the remote property.","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":289,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"getForClient","desc":"Returns the value stored *specifically* for `client` in the remote property. ","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":301,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"set","desc":"Sets the value of the remote property to `value`.\\n\\n:::note Precaution!\\n[Argument limitations](https://create.roblox.com/docs/scripting/events/argument-limitations-for-bindables-and-remotes)\\napply, as remote functions are internally used to render `value` accessible to the respective clients.\\n:::","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":319,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"destroy","desc":"Destroys the remote property and renders it unusable.","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":329,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"dispatch","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","private":true,"source":{"line":337,"path":"src/network/Server/RemoteProperty.lua"}}],"properties":[{"name":"updated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof the remote property is set to a new one. The signal is only passed the new value as the only argument.","lua_type":"Signal <newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":18,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"clientValueUpdated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof `player` specifically in the remote property is set to a new one. The signal is passed the player \\nas the first argument, and the new specific value of `player` set in the remote property, as the second argument. ","lua_type":"Signal <client: Player, newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":30,"path":"src/network/Server/RemoteProperty.lua"}},{"name":"RemoteProperty","desc":" \\n\\nAn exported Luau type of remote property.","lua_type":"Type","readonly":true,"source":{"line":38,"path":"src/network/Server/RemoteProperty.lua"}}],"types":[{"name":"Middleware","desc":"`clientSet` must be an array of callbacks, if specified.\\n\\n### clientSet\\n\\nCallbacks in `clientSet` are called whenever the client tries to set the value of the remote property\\n*for themselves specifically*.\\n\\nThe first and *only* argument passed to each callback is just the client. \\n\\n```lua\\nlocal clientSetCallbacks = {\\n    function (client)\\n        print(client:IsA(\\"Player\\")) --\x3e true \\n    end\\n}\\n---\\n```\\n\\n:::warning Yielding is not allowed\\nMiddleware callbacks aren\'t allowed to yield. If they do so, their thread will be closed and an error will be outputted, but\\nother callbacks will not be affected.\\n:::\\n\\n:::tip More control\\nA callback can return a non-nil value, which will then be set as the value for the client in the remote property.\\nThis is useful in cases where you want to have more control over what values the client can set for them in the remote\\nproperty.\\n\\nFor e.g:\\n\\n```lua\\n-- Server\\nlocal Workspace = game:GetService(\\"Workspace\\")\\n\\nlocal testRemoteProperty = Network.Server.RemoteProperty.new(50, {\\n    clientSet = {function() return \\"rickrolled\\" end}\\n})\\n\\nlocal testNetwork = Network.Server.new(\\"TestNetwork\\")\\ntestNetwork:append(\\"property\\", testRemoteProperty)\\ntestNetwork:dispatch(Workspace)\\n\\n-- Client\\nlocal Workspace = game:GetService(\\"Workspace\\")\\n\\nlocal testNetwork = network.client.fromParent(\\"TestNetwork\\", Workspace):expect()\\ntestNetwork.property:set(1)\\nprint(testNetwork.updated:Wait()) --\x3e \\"rickrolled\\" (This ought to print 1, but our middleware returned a custom value!)\\n```\\n\\nAdditionally, if more than 1 callback returns a value, then all those returned values will be packed into an array and *then* sent\\nback to the client. This is by design - as it isn\'t ideal to disregard all returned values for just 1. \\n\\nFor e.g:\\n\\n```lua\\n-- Server\\nlocal Workspace = game:GetService(\\"Workspace\\")\\n\\nlocal testRemoteProperty = Network.Server.RemoteProperty.new(50, {\\n    clientSet = {\\n        function() return \\"rickrolled\\" end,\\n        function() return \\"oof\\" end,\\n        function() return \\"hello\\" end\\n    }\\n})\\n\\nlocal testNetwork = Network.Server.new(\\"TestNetwork\\")\\ntestNetwork:append(\\"property\\", testRemoteProperty)\\ntestNetwork:dispatch(Workspace)\\n\\n-- Client\\nlocal Workspace = game:GetService(\\"Workspace\\")\\n\\nlocal testNetwork = network.client.fromParent(\\"TestNetwork\\", Workspace):expect()\\ntestNetwork.property:set(1)\\nprint(testNetwork.updated:Wait()) --\x3e {\\"oofed\\", \\"rickrolled\\", \\"hello\\"} \\n```\\n:::","fields":[{"name":"clientSet","lua_type":"{ (client: Player, value: any) -> any }?,","desc":""}],"source":{"line":124,"path":"src/network/Server/RemoteProperty.lua"}}],"name":"RemoteProperty","desc":"A remote property in layman\'s terms is simply an  object which can store some value for \\nall players as well as store in values specific to players. ","source":{"line":7,"path":"src/network/Server/RemoteProperty.lua"}}')}}]);